{"version":3,"file":"main.min.js","sources":["../src/main.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Javascript to initialise the Recently accessed courses block.\r\n *\r\n * @module     block_recentlyaccessedcourses/main\r\n * @copyright  2018 Victor Deniz <victor@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\n define(\r\n    [\r\n        'jquery',\r\n        'core/custom_interaction_events',\r\n        'core/notification',\r\n        'core/pubsub',\r\n        'core/paged_content_paging_bar',\r\n        'core/templates',\r\n        'core_course/events',\r\n        'core_course/repository',\r\n        'core/aria',\r\n    ],\r\n    function(\r\n        $,\r\n        CustomEvents,\r\n        Notification,\r\n        PubSub,\r\n        PagedContentPagingBar,\r\n        Templates,\r\n        CourseEvents,\r\n        CoursesRepository,\r\n        Aria\r\n    ) {\r\n\r\n        // Constants.\r\n        var NUM_COURSES_TOTAL = 10;\r\n        var SELECTORS = {\r\n            BLOCK_CONTAINER: '[data-region=\"recentlyaccessedcourses\"]',\r\n            CARD_CONTAINER: '[data-region=\"card-deck\"]',\r\n            COURSE_IS_FAVOURITE: '[data-region=\"is-favourite\"]',\r\n            CONTENT: '[data-region=\"view-content\"]',\r\n            EMPTY_MESSAGE: '[data-region=\"empty-message\"]',\r\n            LOADING_PLACEHOLDER: '[data-region=\"loading-placeholder\"]',\r\n            PAGING_BAR: '[data-region=\"paging-bar\"]',\r\n            PAGING_BAR_NEXT: '[data-control=\"next\"]',\r\n            PAGING_BAR_PREVIOUS: '[data-control=\"previous\"]'\r\n        };\r\n        // Module variables.\r\n        var contentLoaded = false;\r\n        var allCourses = [];\r\n        var visibleCoursesId = null;\r\n        var cardWidth = 410;\r\n        var viewIndex = 0;\r\n        var availableVisibleCards = 1;\r\n\r\n        /**\r\n         * Show the empty message when no course are found.\r\n         *\r\n         * @param {object} root The root element for the courses view.\r\n         */\r\n        var showEmptyMessage = function(root) {\r\n            root.find(SELECTORS.EMPTY_MESSAGE).removeClass('hidden');\r\n            root.find(SELECTORS.LOADING_PLACEHOLDER).addClass('hidden');\r\n            root.find(SELECTORS.CONTENT).addClass('hidden');\r\n        };\r\n\r\n        /**\r\n         * Show the empty message when no course are found.\r\n         *\r\n         * @param {object} root The root element for the courses view.\r\n         */\r\n        var showContent = function(root) {\r\n            root.find(SELECTORS.CONTENT).removeClass('hidden');\r\n            root.find(SELECTORS.EMPTY_MESSAGE).addClass('hidden');\r\n            root.find(SELECTORS.LOADING_PLACEHOLDER).addClass('hidden');\r\n        };\r\n\r\n        /**\r\n         * Show the paging bar.\r\n         *\r\n         * @param {object} root The root element for the courses view.\r\n         */\r\n        var showPagingBar = function(root) {\r\n            var pagingBar = root.find(SELECTORS.PAGING_BAR);\r\n            pagingBar.css('opacity', 1);\r\n            pagingBar.css('visibility', 'visible');\r\n            Aria.unhide(pagingBar);\r\n        };\r\n\r\n        /**\r\n         * Hide the paging bar.\r\n         *\r\n         * @param {object} root The root element for the courses view.\r\n         */\r\n        var hidePagingBar = function(root) {\r\n            var pagingBar = root.find(SELECTORS.PAGING_BAR);\r\n            pagingBar.css('opacity', 0);\r\n            pagingBar.css('visibility', 'hidden');\r\n            Aria.hide(pagingBar);\r\n        };\r\n\r\n        /**\r\n         * Show the favourite indicator for the given course (if it's in the list).\r\n         *\r\n         * @param {object} root The root element for the courses view.\r\n         * @param {number} courseId The id of the course to be favourited.\r\n         */\r\n        var favouriteCourse = function(root, courseId) {\r\n            allCourses.forEach(function(course) {\r\n                if (course.attr('data-course-id') == courseId) {\r\n                    course.find(SELECTORS.COURSE_IS_FAVOURITE).removeClass('hidden');\r\n                }\r\n            });\r\n        };\r\n\r\n        /**\r\n         * Hide the favourite indicator for the given course (if it's in the list).\r\n         *\r\n         * @param {object} root The root element for the courses view.\r\n         * @param {number} courseId The id of the course to be unfavourited.\r\n         */\r\n        var unfavouriteCourse = function(root, courseId) {\r\n            allCourses.forEach(function(course) {\r\n                if (course.attr('data-course-id') == courseId) {\r\n                    course.find(SELECTORS.COURSE_IS_FAVOURITE).addClass('hidden');\r\n                }\r\n            });\r\n        };\r\n\r\n        /**\r\n         * Render the a list of courses.\r\n         *\r\n         * @param {array} courses containing array of courses.\r\n         * @return {promise} Resolved with list of rendered courses as jQuery objects.\r\n         */\r\n        var renderAllCourses = function(courses) {\r\n            var showcoursecategory = $(SELECTORS.BLOCK_CONTAINER).data('displaycoursecategory');\r\n            var promises = courses.map(function(course) {\r\n                course.showcoursecategory = showcoursecategory;\r\n                return Templates.render('block_recentlyaccessedcourses/course-card', course);\r\n            });\r\n\r\n            return $.when.apply(null, promises).then(function() {\r\n                var renderedCourses = [];\r\n\r\n                promises.forEach(function(promise) {\r\n                    promise.then(function(html) {\r\n                        renderedCourses.push($(html));\r\n                        return;\r\n                    })\r\n                    .catch(Notification.exception);\r\n                });\r\n\r\n                return renderedCourses;\r\n            });\r\n        };\r\n\r\n        /**\r\n         * Fetch user's recently accessed courses and reload the content of the block.\r\n         *\r\n         * @param {int} userid User whose courses will be shown\r\n         * @returns {promise} The updated content for the block.\r\n         */\r\n        var loadContent = function(userid) {\r\n            return CoursesRepository.getLastAccessedCourses(userid, NUM_COURSES_TOTAL)\r\n                .then(function(courses) {\r\n                    return renderAllCourses(courses);\r\n                });\r\n        };\r\n\r\n        /**\r\n         * Recalculate the number of courses that should be visible.\r\n         *\r\n         * @param {object} root The root element for the courses view.\r\n         */\r\n        var recalculateVisibleCourses = function(root) {\r\n            var container = root.find(SELECTORS.CONTENT).find(SELECTORS.CARD_CONTAINER);\r\n            var availableWidth = parseFloat(root.css('width'));\r\n            var numberOfCourses = allCourses.length;\r\n            var start = 0;\r\n\r\n            // FIX - rozwiązanie problemu z wyświetlaniem kart 'Ostatnio przeglądane kursy'\r\n            allCourses.forEach(course => {\r\n                course.css('max-width', cardWidth+'px');\r\n            });\r\n\r\n            availableVisibleCards = Math.floor(availableWidth / cardWidth);\r\n\r\n            if (viewIndex + availableVisibleCards < numberOfCourses) {\r\n                start = viewIndex;\r\n            } else {\r\n                var overflow = (viewIndex + availableVisibleCards) - numberOfCourses;\r\n                start = viewIndex - overflow;\r\n                start = start >= 0 ? start : 0;\r\n            }\r\n\r\n            // At least show one card.\r\n            if (availableVisibleCards === 0) {\r\n                availableVisibleCards = 1;\r\n            }\r\n\r\n            var coursesToShow = allCourses.slice(start, start + availableVisibleCards);\r\n            // Create an id for the list of courses we expect to be displayed.\r\n            var newVisibleCoursesId = coursesToShow.reduce(function(carry, course) {\r\n                return carry + course.attr('data-course-id');\r\n            }, '');\r\n\r\n            // Centre the courses if we have an overflow of courses.\r\n            if (allCourses.length > coursesToShow.length) {\r\n                container.addClass('justify-content-center');\r\n                container.removeClass('justify-content-start');\r\n            } else {\r\n                container.removeClass('justify-content-center');\r\n                container.addClass('justify-content-start');\r\n            }\r\n\r\n            // Don't bother updating the DOM unless the visible courses have changed.\r\n            if (visibleCoursesId != newVisibleCoursesId) {\r\n                var pagingBar = root.find(PagedContentPagingBar.rootSelector);\r\n                container.html(coursesToShow);\r\n                visibleCoursesId = newVisibleCoursesId;\r\n\r\n                if (availableVisibleCards >= allCourses.length) {\r\n                    hidePagingBar(root);\r\n                } else {\r\n                    showPagingBar(root);\r\n\r\n                    if (viewIndex === 0) {\r\n                        PagedContentPagingBar.disablePreviousControlButtons(pagingBar);\r\n                    } else {\r\n                        PagedContentPagingBar.enablePreviousControlButtons(pagingBar);\r\n                    }\r\n\r\n                    if (viewIndex + availableVisibleCards >= allCourses.length) {\r\n                        PagedContentPagingBar.disableNextControlButtons(pagingBar);\r\n                    } else {\r\n                        PagedContentPagingBar.enableNextControlButtons(pagingBar);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Register event listeners for the block.\r\n         *\r\n         * @param {object} root The root element for the recentlyaccessedcourses block.\r\n         */\r\n        var registerEventListeners = function(root) {\r\n            var resizeTimeout = null;\r\n            var drawerToggling = false;\r\n\r\n            PubSub.subscribe(CourseEvents.favourited, function(courseId) {\r\n                favouriteCourse(root, courseId);\r\n            });\r\n\r\n            PubSub.subscribe(CourseEvents.unfavorited, function(courseId) {\r\n                unfavouriteCourse(root, courseId);\r\n            });\r\n\r\n            PubSub.subscribe('nav-drawer-toggle-start', function() {\r\n                if (!contentLoaded || !allCourses.length || drawerToggling) {\r\n                    // Nothing to recalculate.\r\n                    return;\r\n                }\r\n\r\n                drawerToggling = true;\r\n                var recalculationCount = 0;\r\n                // This function is going to recalculate the number of courses while\r\n                // the nav drawer is opening or closes (up to a maximum of 5 recalcs).\r\n                var doRecalculation = function() {\r\n                    setTimeout(function() {\r\n                        recalculateVisibleCourses(root);\r\n                        recalculationCount++;\r\n\r\n                        if (recalculationCount < 5 && drawerToggling) {\r\n                            // If we haven't done too many recalculations and the drawer\r\n                            // is still toggling then recurse.\r\n                            doRecalculation();\r\n                        }\r\n                    }, 100);\r\n                };\r\n\r\n                // Start the recalculations.\r\n                doRecalculation(root);\r\n            });\r\n\r\n            PubSub.subscribe('nav-drawer-toggle-end', function() {\r\n                drawerToggling = false;\r\n            });\r\n\r\n            $(window).on('resize', function() {\r\n                if (!contentLoaded || !allCourses.length) {\r\n                    // Nothing to reclculate.\r\n                    return;\r\n                }\r\n\r\n                // Resize events fire rapidly so recalculating the visible courses each\r\n                // time can be expensive. Let's debounce them,\r\n                if (!resizeTimeout) {\r\n                    resizeTimeout = setTimeout(function() {\r\n                        resizeTimeout = null;\r\n                        recalculateVisibleCourses(root);\r\n                    // The recalculateVisibleCourses function will execute at a rate of 15fps.\r\n                    }, 66);\r\n                }\r\n            });\r\n\r\n            CustomEvents.define(root, [CustomEvents.events.activate]);\r\n            root.on(CustomEvents.events.activate, SELECTORS.PAGING_BAR_NEXT, function(e, data) {\r\n                var button = $(e.target).closest(SELECTORS.PAGING_BAR_NEXT);\r\n                if (!button.hasClass('disabled')) {\r\n                    viewIndex = viewIndex + availableVisibleCards;\r\n                    recalculateVisibleCourses(root);\r\n                }\r\n\r\n                data.originalEvent.preventDefault();\r\n            });\r\n\r\n            root.on(CustomEvents.events.activate, SELECTORS.PAGING_BAR_PREVIOUS, function(e, data) {\r\n                var button = $(e.target).closest(SELECTORS.PAGING_BAR_PREVIOUS);\r\n                if (!button.hasClass('disabled')) {\r\n                    viewIndex = viewIndex - availableVisibleCards;\r\n                    viewIndex = viewIndex < 0 ? 0 : viewIndex;\r\n                    recalculateVisibleCourses(root);\r\n                }\r\n\r\n                data.originalEvent.preventDefault();\r\n            });\r\n        };\r\n\r\n        /**\r\n         * Get and show the recent courses into the block.\r\n         *\r\n         * @param {int} userid User from which the courses will be obtained\r\n         * @param {object} root The root element for the recentlyaccessedcourses block.\r\n         */\r\n        var init = function(userid, root) {\r\n            root = $(root);\r\n\r\n            registerEventListeners(root);\r\n            loadContent(userid)\r\n                .then(function(renderedCourses) {\r\n                    allCourses = renderedCourses;\r\n                    contentLoaded = true;\r\n\r\n                    if (allCourses.length) {\r\n                        showContent(root);\r\n                        recalculateVisibleCourses(root);\r\n                    } else {\r\n                        showEmptyMessage(root);\r\n                    }\r\n\r\n                    return;\r\n                })\r\n                .catch(Notification.exception);\r\n        };\r\n\r\n        return {\r\n            init: init\r\n        };\r\n    });"],"names":["define","$","CustomEvents","Notification","PubSub","PagedContentPagingBar","Templates","CourseEvents","CoursesRepository","Aria","SELECTORS","contentLoaded","allCourses","visibleCoursesId","viewIndex","availableVisibleCards","loadContent","userid","getLastAccessedCourses","then","courses","showcoursecategory","data","promises","map","course","render","when","apply","renderedCourses","forEach","promise","html","push","catch","exception","renderAllCourses","recalculateVisibleCourses","root","container","find","availableWidth","parseFloat","css","numberOfCourses","length","start","cardWidth","Math","floor","coursesToShow","slice","newVisibleCoursesId","reduce","carry","attr","addClass","removeClass","pagingBar","rootSelector","hide","hidePagingBar","unhide","showPagingBar","disablePreviousControlButtons","enablePreviousControlButtons","disableNextControlButtons","enableNextControlButtons","registerEventListeners","resizeTimeout","drawerToggling","subscribe","favourited","courseId","favouriteCourse","unfavorited","unfavouriteCourse","recalculationCount","doRecalculation","setTimeout","window","on","events","activate","e","target","closest","hasClass","originalEvent","preventDefault","init","showContent","showEmptyMessage"],"mappings":"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"}